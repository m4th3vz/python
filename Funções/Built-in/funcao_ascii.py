# Fun√ß√£o ascii() em Python

"""
A fun√ß√£o built-in ascii() retorna uma vers√£o ‚Äúescapada‚Äù de um objeto string,
onde **caracteres n√£o ASCII** s√£o convertidos para sequ√™ncias de escape Unicode.

√ötil para visualizar strings com acentos, emojis, s√≠mbolos e caracteres internacionais.
"""

# Exemplo com string com acentos
texto = "Ol√°, voc√™ est√° bem?"
print("ascii(texto) =", ascii(texto))
# Sa√≠da: 'Ol\u00e1, voc\u00ea est\u00e1 bem?'

# Exemplo com emoji
emoji = "Python üêç √© legal!"
print("ascii(emoji) =", ascii(emoji))
# Sa√≠da: 'Python \U0001f40d \u00e9 legal!'

# Exemplo com outros s√≠mbolos Unicode
simbolos = "Œî, Œª, œÄ"
print("ascii(simbolos) =", ascii(simbolos))
# Sa√≠da: '\u0394, \u03bb, \u03c0'

"""
A fun√ß√£o ascii() √© parecida com repr(), mas com foco em compatibilidade ASCII.
√â √∫til, por exemplo, para gerar logs leg√≠veis ou garantir que uma string possa ser salva em arquivos ASCII.
"""

# Compara√ß√£o entre print() e ascii()
nome = "Jo√£o"
print("print normal:", nome)        # Sa√≠da: Jo√£o
print("usando ascii():", ascii(nome))  # Sa√≠da: 'Jo\u00e3o'

"""
Resumo:
- ascii() √© √≥timo para inspecionar strings com caracteres especiais.
- Ideal para ambientes onde voc√™ precisa escapar tudo para ASCII puro (como logs, debug, arquivos texto simples).
"""

# Dica: se quiser salvar uma string em ASCII puro, combine ascii() com open(..., encoding='ascii', errors='ignore') ou 'backslashreplace'
